# # Definition for a binary tree node.
# # class TreeNode:
# #     def __init__(self, val=0, left=None, right=None):
# #         self.val = val
# #         self.left = left
# #         self.right = right
# class Solution:
#     def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
#         if root ==None:
#             return []
#         self.result =[]
#         self.result =[]
#         self.dfs(root,0)
#         return self.result

#     def dfs(self, root: Optional[TreeNode], lvl:int) -> None:
#         if root ==None:
#             return
#         if lvl ==len(self.result):
#             temp =[]
#             temp.append(root.val)
#             self.result.append(temp)
#         else:
#             self.result[lvl].append(root.val)

#         self.dfs(root.left,lvl+1)
#         self.dfs(root.right,lvl+1)

# BFS approach - 
from queue  import Queue
class Solution:
    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
        if root ==None:
            return []
        q= Queue()
        result =[]
        q.put(root)
        while not q.empty():
            size = q.qsize()
            temp=[]
            for i in range(size):
                
