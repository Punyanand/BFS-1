from queue import Queue
class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        if numCourses == 0:
            return True

        q = Queue()
        indegrees = [0 for _ in range(numCourses)]
        Map = dict()
        count = 0

        # Build graph
        for i in range(len(prerequisites)):
            From = prerequisites[i][1]
            To = prerequisites[i][0]
            indegrees[To] += 1
            if From not in Map:
                Map[From] = []
            Map[From].append(To)

        # Add courses with no prerequisites to queue
        for i in range(numCourses):
            if indegrees[i] == 0:
                q.put(i)
                count += 1

        if count == 0:
            return False

        # Process courses using BFS
        while q.qsize() > 0:
            curr = q.get()
            if curr in Map:
                edges = Map[curr]
                for edge in edges:
                    indegrees[edge] -= 1  # Reduce in-degree
                    if indegrees[edge] == 0:  # If no more prerequisites, add to queue
                        q.put(edge)
                        count += 1

        return count == numCourses  # Return True if all courses can be completed
